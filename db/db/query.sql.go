// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, name)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
  tag
) VALUES (
  $1
)
RETURNING id, tag
`

func (q *Queries) CreateTag(ctx context.Context, tag string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, tag)
	var i Tag
	err := row.Scan(&i.ID, &i.Tag)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  title, body, user_id, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, body, user_id, status, created_at
`

type CreateTaskParams struct {
	Title  string
	Body   string
	UserID int64
	Status string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Body,
		arg.UserID,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, email, role
) VALUES (
  $1, $2, $3
)
RETURNING id, username, email, role, created_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Role     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGroup, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTag, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getGroup = `-- name: GetGroup :one

SELECT id, name FROM groups
WHERE id = $1 LIMIT 1
`

// Groups
func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRow(ctx, getGroup, id)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTag = `-- name: GetTag :one

SELECT id, tag FROM tags
WHERE id = $1 LIMIT 1
`

// Tags
func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRow(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Tag)
	return i, err
}

const getTask = `-- name: GetTask :one

SELECT id, title, body, user_id, status, created_at FROM tasks
WHERE id = $1 LIMIT 1
`

// Tasks
func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT id, username, email, role, created_at FROM users
WHERE id = $1 LIMIT 1
`

// Users
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listGroups = `-- name: ListGroups :many
SELECT id, name FROM groups
ORDER BY id
`

func (q *Queries) ListGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, tag FROM tags
ORDER BY id
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, body, user_id, status, created_at FROM tasks
ORDER BY id
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, role, created_at FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE groups
  set name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateGroupParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.Exec(ctx, updateGroup, arg.ID, arg.Name)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
  set tag = $2
WHERE id = $1
RETURNING id, tag
`

type UpdateTagParams struct {
	ID  int64
	Tag string
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.Exec(ctx, updateTag, arg.ID, arg.Tag)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
  set title = $2,
  body = $3, 
  user_id = $4, 
  status = $5
WHERE id = $1
RETURNING id, title, body, user_id, status, created_at
`

type UpdateTaskParams struct {
	ID     int64
	Title  string
	Body   string
	UserID int64
	Status string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.UserID,
		arg.Status,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set username = $2,
  email = $3,
  role = $4
WHERE id = $1
RETURNING id, username, email, role, created_at
`

type UpdateUserParams struct {
	ID       int64
	Username string
	Email    string
	Role     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Role,
	)
	return err
}
